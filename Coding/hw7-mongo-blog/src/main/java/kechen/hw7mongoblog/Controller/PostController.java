package kechen.hw7mongoblog.Controller;

import kechen.hw7mongoblog.model.Post;
import kechen.hw7mongoblog.repository.PostRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class PostController {
    private final PostRepository postRepository;

    @Autowired
    public PostController(PostRepository postRepository) {
        this.postRepository = postRepository;
    }

    @PostMapping("/posts")
    public Post createPost(@RequestBody Post post) {
        return postRepository.save(post);
    }
}
/**
 * - `PostController`: This class is a Spring MVC controller that handles HTTP requests related to blog posts.
 *
 * - `private final PostRepository postRepository`: This field is an instance of `PostRepository`, which is injected into the `PostController` using constructor-based dependency injection.
 *  It's used to interact with the database and perform CRUD operations on the `Post` entity.
 *
 * - `public PostController(PostRepository postRepository)`: This is the constructor of `PostController`, which takes an instance of `PostRepository` as a parameter.
 *  This constructor is annotated with `@Autowired` or `@Inject` (not explicitly shown), allowing Spring to automatically inject the `PostRepository` bean when creating an instance of `PostController`.
 *
 * - `@PostMapping("/posts")`: This annotation maps HTTP POST requests to the `/posts` endpoint to the `createPost` method. When a POST request is made to `/posts`, this method is invoked.
 *
 * - `public Post createPost(@RequestBody Post post)`: This method is responsible for handling POST requests to create a new blog post.
 *  It takes a `Post` object as a request body, received from the HTTP request using `@RequestBody` annotation. @RequestBody注解将请求主体的内容绑定到Post对象（@RequestBody注解告诉Spring将请求的主体内容转换为指定的Java对象类型。）
 *
 * - `return postRepository.save(post);`: Inside the `createPost` method, it uses the `postRepository` to save the received `Post` object into the database. The `save` method of `PostRepository` is responsible for persisting the `Post` entity into the MongoDB database. After saving, it returns the saved `Post` object, which could include an automatically generated ID if it was generated by the database during the save operation.
 *
 * In summary, the `PostController` class handles HTTP POST requests to the `/posts` endpoint by accepting a `Post` object in the request body and saving it to the MongoDB database using the `PostRepository`. This allows the creation of new blog posts via a POST request to the specified endpoint.
 */
